>> PerceptualVBLSyncTest()
PTB-INFO: Multi-display setup in explicit multi-display mode detected. Using the following mapping:
PTB-INFO: Screen 0 corresponds to the full Windows desktop area. Useful for stereo presentations in stereomode=4 ...
PTB-INFO: Screen 1 corresponds to the display area of the monitor with the Windows-internal name \\.\DISPLAY1 ...
PTB-INFO: Screen 2 corresponds to the display area of the monitor with the Windows-internal name \\.\DISPLAY2 ...

PTB-INFO: Your version of Matlab 64-Bit is global system DPI aware. On Windows-8 or later, fullscreen onscreen windows will only work 
PTB-INFO: properly timing-wise when displayed on displays with the same pixel density as your systems primary display monitor.
PTB-INFO: For your multi-display setup the stimulus display monitor must have a DPI of (96, 96), matching that of
PTB-INFO: your primary display monitor. Ideally you will only display on the primary display in the first place.
PTB-INFO: Displaying on anything with a different DPI will cause mysterious visual timing problems, sync failures etc.
PTB-INFO: Read 'help RetinaDisplay' for more info on this topic.
  PerceptualVBLSyncTest(screen, stereomode, fullscreen, doublebuffer, maxduration, vblSync, testdualheadsync)
 
  Perceptual synchronization test for synchronization of Screen('Flip') and
  Screen('WaitBlanking') to the vertical retrace.
 
  Arguments:
  'screen' Either a single screen handle, or none (in which case the
  display with the maximum id will be used), or a vector of two handles in
  stereomode 10, e.g., [0 1] if you want to output to screens 0 and 1. You
  can also pass a vector of two screens when stereomode is not set to 10.
  In this case two separate (non-stereo) onscreen windows will be opened on
  both displays and they will get flipped in multiflip mode 2. That means
  that the first display (first element of 'screen') is synced to VBL, but
  the 2nd one is synced to bufferswaps of the first one. This is a
  straightforward test to check if two displays of a stereosetup run with a
  synchronized retrace cycle (good!) or if they are phase-shifted or
  drifting against each other (not good!).
 
  'stereomode' Which stereomode to use? Defaults to zero, ie. no stereo.
 
  'fullscreen' Fullscreen presentation? Defaults to 1 ie. yes. In
  non-fullscreen mode, no proper synchronization of bufferswaps can be
  expected.
 
  'doublebuffer' Single- or double-buffering (1). Defaults to 1. In single
  buffer mode there is no sync to retrace, so this is a good way to
  simulate the tearing artifacts that would happen on sync failure, just to
  get an impression.
 
  'maxduration' Maximum runtime of test: Runs until keypress or maxduration
  seconds have elapsed (Default is 10 seconds).
 
  'vblSync' If 1, synchronize bufferswaps to vertical retrace of monitor,
  otherwise (setting 0) swap immediately without sync, ie., usually with tearing.
 
  'testdualheadsync' If 1, and 'vblSync' is zero, manually wait until the video
  scanout position reaches half the height of the display, then swap. If this
  is done on a multi-display setup and the video scanout cycles of all the
  participating displays are properly synchronized, you should see a "static"
  crack line roughly at half the height of the display, maybe a bit lower. If
  you see a wandering crack line, at least on some displays, or you see vertical
  offsets of the position of the crack line between displays, then the displays
  are not properly synchronized, ie., not suitable for artifact free binocular
  stimulation. Caveat: This logic has been developed and tested specifically
  for testing on Linux with a single X-Screen spanning multiple displays. It may
  or may not be suitable to assess other operating systems or display configurations.
 
  After starting this test, you should see a flickering greyish background
  that flickers in a homogenous way - without cracks or weird moving patterns
  in the flickering area. If you see an imhogenous flicker, this means that
  synchronization of stimulus onset to the vertical retrace doesn't work due
  to some serious bug or limitation of your graphics hardware or its driver.
  If you don't know what this means, you can test this script with parameter
  doublebuffer == 0 to artificially create a synchronization failure.
 
  On many systems you should also see some emerging pattern of yellow horizontal lines.
  These lines should be tightly concentrated/clustered in the topmost area of
  the screen. Lots of yellow lines in the middle or bottom area or even
  randomly distributed lines indicate some bug in the driver of your graphics
  hardware. This is a common problem of all ATI graphics adapters on MacOS-X
  versions earlier than OS-X 10.4.3 when running a dual-display setup...
 
  A second reason for distributed yellow lines could be bad timing on your
  machine, e.g., due to background activity by virus scanners or the Spotlight
  indexing service on OS-X. Turn these off for conducting your studies!
 

Press ENTER key to start the test. The test will stop after 10 seconds
or any keypress...



PTB-INFO: This is Psychtoolbox-3 for Microsoft Windows, under Matlab 64-Bit (Version 3.0.14 - Build date: Apr  6 2018).
PTB-INFO: Support status on this operating system release: Windows version 10.0 supported and tested to some limited degree.
PTB-INFO: Type 'PsychtoolboxVersion' for more detailed version information.
PTB-INFO: Most parts of the Psychtoolbox distribution are licensed to you under terms of the MIT License, with
PTB-INFO: some restrictions. See file 'License.txt' in the Psychtoolbox root folder for the exact licensing conditions.

PTB-INFO: The detected endline of the vertical blank interval is equal or lower than the startline. This indicates
PTB-INFO: that i couldn't detect the duration of the vertical blank interval and won't be able to correct timestamps
PTB-INFO: for it. This will introduce a very small and constant offset (typically << 1 msec). Read 'help BeampositionQueries'
PTB-INFO: for how to correct this, should you really require that last few microseconds of precision.
PTB-INFO: Btw. this can also mean that your systems beamposition queries are slightly broken. It may help timing precision to
PTB-INFO: enable the beamposition workaround, as explained in 'help ConserveVRAMSettings', section 'kPsychUseBeampositionQueryWorkaround'.


PTB-INFO: OpenGL-Renderer is NVIDIA Corporation :: GeForce GTX 960/PCIe/SSE2 :: 4.6.0 NVIDIA 432.00
PTB-INFO: VBL startline = 1080 , VBL Endline = 1079
PTB-INFO: Measured monitor refresh interval from beamposition = 8.333200 ms [120.001920 Hz].
PTB-INFO: Will use beamposition query for accurate Flip time stamping.
PTB-INFO: Measured monitor refresh interval from VBLsync = 8.333292 ms [120.000595 Hz]. (50 valid samples taken, stddev=0.061364 ms.)
PTB-INFO: Reported monitor refresh interval from operating system = 8.333333 ms [120.000000 Hz].
PTB-INFO: Small deviations between reported values are normal and no reason to worry.
PTB-INFO: ==============================================================================================================================
PTB-INFO: WINDOWS DWM DESKTOP COMPOSITOR IS ACTIVE. On this Windows-10 or later system, Psychtoolbox can no longer reliably detect if
PTB-INFO: this will cause trouble for timing and integrity of visual stimuli or not. You might be just fine, or you could be in trouble.
PTB-INFO: Use external measurement equipment and independent procedures to verify reliability of timing if you care about proper timing.
PTB-INFO: ==============================================================================================================================
>> 