clear allsca

%
%% PRL quantification for FLAP
% Marcello A. Maniglia, 2017-2019/10/28, Hallowe'en 2023
%this script analyzes eyetracker data generated by the PRL induction task
%and outputs fixation distribution as graphs and distributions of fixations
%Some changes can be made to
%modify some of the output



addpath([cd '/Oculomotor Analysis/Functions']);


%subNum=[baseName(70:75) ' Sess ' num2str(xi)];
%name=['Crossland distribution' subNum ];

name='Fixation distribution';

% available trials
firsttrial=1;
totaltrial=str2num(TrialNum(6:end));

durationtocallfixation=.133; %define the duration of the fixation in seconds (default: .133s)
framestocallfixation=round(durationtocallfixation/ifi); %duration of the fixation in frames (ifi = inter frame interval)
%screen info
Xcenter=wRect(3)/2;
Ycenter=wRect(4)/2;



fixationbins=.05; % for weighted fixation durations (longer durations counting more than short durations), we bin fixation
fixationbinsframes=round(fixationbins/ifi);
postTargetWindowTime=.150/ifi;
postTargetWindow=round(postTargetWindowTime);


% replace data points where eye info is missing
for ui=1:totaltrial
    TrialNum = strcat('Trial',num2str(ui));
    for uii=1:length(EyeSummary.(TrialNum).EyeData)
        if EyeSummary.(TrialNum).EyeData(uii,1)>=33724
            EyeSummary.(TrialNum).EyeData(uii,1:2)=nan;
        end
    end
end
%initialize heatmap for KDE
xlimit=(wRect(3)/2)/pix_deg;
ylimit=(wRect(4)/2)/pix_deg_vert;
sampleX=(-xlimit:1:xlimit);
sampleY=(-ylimit:1:ylimit);
heatmatrix= zeros(length(sampleX), length(sampleY));


%find the first available eye position after stimulus presentation
firstframetarget=[];
fixation_counter=[];

%initialize BCEA
BCEA_data=zeros(totaltrial,1);

%initialize graph
figure
poss2 = [-(wRect(3)/2)/pix_deg -(wRect(4)/2)/pix_deg_vert ((wRect(3)/2)*2)/pix_deg ((wRect(4)/2)*2)/pix_deg_vert];
rectangle('Position',poss2,'EdgeColor',[1 1 1],'FaceColor',[1 1 1])
hold on
poss2=poss2*1.2;
poss = [-scotomadeg/2 -scotomadeg/2 scotomadeg scotomadeg];
rectangle('Position',poss,'Curvature',[1 1],'EdgeColor',[.8 .8 .8],'FaceColor',[.8 .8 .8])
hold on
line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
hold on
line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
hold on
viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
text(0,-11.5, '10^{\circ} ', 'FontSize', 20)
text(0,-6.5, '5^{\circ} ', 'FontSize', 20)
text(0,-16.5, '15^{\circ} ', 'FontSize', 20)


for i=firsttrial:totaltrial
    TrialNum = strcat('Trial',num2str(i));
    firstfix=0; %counter of valid fixations after target appearance
    if exist('EyeSummary.(TrialNum).FixationIndices(end,2)')==0
        EyeSummary.(TrialNum).FixationIndices(end,2)=length(EyeSummary.(TrialNum).EyeData);
    end
    
    if sum(EyeSummary.(TrialNum).EyeData(:,5)>=EyeSummary.(TrialNum).TimeStamps.Fixation)>=1
        
        %find the first available eye position after stimulus presentation
        FramesAfterTargetPresentation=find(EyeSummary.(TrialNum).EyeData(:,5)>=EyeSummary.(TrialNum).TimeStamps.Fixation);
        if length(FramesAfterTargetPresentation)>0 %at least one valid frame after target presentation
            
            validtrial(i)=1;
            firstframetarget=[firstframetarget FramesAfterTargetPresentation(1) ];
            
            % target location in pix
            tgt_x=EyeSummary.(TrialNum).TargetX*pix_deg;
            tgt_y=EyeSummary.(TrialNum).TargetY*pix_deg;
            
            Heatmap.(TrialNum).TargetXRespectToCenter=Xcenter+tgt_x;
            Heatmap.(TrialNum).TargetYRespectToCenter=Ycenter+tgt_y;
            % initialize fixation indexes so that we conssider only those
            % wih a number of frames in between that is equal or above our
            % minimum number of consecutive fixation frames to call it a
            % fixation
            newfixation.(TrialNum).fixStart=[];
            newfixation.(TrialNum).fixStop=[];
            
            for fiu=1:length(EyeSummary.(TrialNum).FixationIndices(:,1))
                if EyeSummary.(TrialNum).FixationIndices(fiu,2)-EyeSummary.(TrialNum).FixationIndices(fiu,1)>=framestocallfixation
                    newfixation.(TrialNum).fixStart=[newfixation.(TrialNum).fixStart EyeSummary.(TrialNum).FixationIndices(fiu,1)];
                    newfixation.(TrialNum).fixStop=[newfixation.(TrialNum).fixStop EyeSummary.(TrialNum).FixationIndices(fiu,2) ];
                end
            end
            
            % weighted fixations
            for ieu=1:length(newfixation.(TrialNum).fixStart)
                dots(ieu)=round((newfixation.(TrialNum).fixStop(ieu)-newfixation.(TrialNum).fixStart(ieu))/fixationbinsframes);
            end
            
            % initialize weighted fixation indexes
            newnewfixation.(TrialNum).fixStart=[];
            newnewfixation.(TrialNum).fixStop=[];
            
            % creating individual fixation dots out of binned fixations
            for ieu2=1:length(newfixation.(TrialNum).fixStart)
                for bincount=1:dots(ieu2)
                    newnewfixation.(TrialNum).fixStart=[newnewfixation.(TrialNum).fixStart newfixation.(TrialNum).fixStart(ieu2)+fixationbinsframes*(bincount-1)];
                    newnewfixation.(TrialNum).fixStop=[newnewfixation.(TrialNum).fixStop newfixation.(TrialNum).fixStop(ieu2)-fixationbinsframes*(bincount-1)];
                end
            end
            if length(newfixation.(TrialNum).fixStart)>1
                
                fixnum=size(newnewfixation.(TrialNum).fixStart);
                reshapefixnum=fixnum(1)*fixnum(2);
                reshapefixnum2= reshape(newnewfixation.(TrialNum).fixStart,[1 reshapefixnum]);
                reshapefixnum2(reshapefixnum2==0)=[];
                reshapefixnum2=sort(reshapefixnum2,'ascend');
                reshapefixnum3=reshapefixnum2+10; % add 10 frames to close the bin
                % fill weighted fixation indexes (beginning and end of a fixation
                % event)
                newnewfixation.(TrialNum).fixStart=reshapefixnum2';
                newnewfixation.(TrialNum).fixStop=reshapefixnum3';
                
                counterr=0;
                clear newstart
                clear newend
                
                for w=1:length(newfixation.(TrialNum).fixStart)
                    totalfixation(i)=w;
                    
                    %eye position at the time of fixation
                    EyeX=EyeSummary.(TrialNum).EyeData(newfixation.(TrialNum).fixStart(w),1);
                    EyeY=EyeSummary.(TrialNum).EyeData(newfixation.(TrialNum).fixStart(w),2);
                    %  eye position normalized by target location
                    %      diffx=EyeX-(wRect(3)/2+tgt_x);
                    %     diffy=EyeY-(wRect(4)/2+tgt_y);
                    
                    %  target location normalized by eye position
                    diffx=((wRect(3)/2+tgt_x)-EyeX);
                    diffy=((wRect(4)/2+tgt_y)-EyeY);
                    
                    
                    if newfixation.(TrialNum).fixStart(w)>(FramesAfterTargetPresentation(1)+postTargetWindow) %if the fixation is within target presentation and the post target window
                        counterr=counterr+1;
                        firstfix=1;
                        
                        newstart=newfixation.(TrialNum).fixStart(w);
                        newend = newfixation.(TrialNum).fixStop(w);
                        totalfixation_post(i)=counterr;
                        
                        Heatmap.(TrialNum).OneFixationX(1:length(EyeSummary.(TrialNum).EyeData(newstart:newend,1)))=EyeSummary.(TrialNum).EyeData(newstart:newend,1);
                        Heatmap.(TrialNum).OneFixationY(1:length(EyeSummary.(TrialNum).EyeData(newstart:newend,1)))=EyeSummary.(TrialNum).EyeData(newstart:newend,2);
                        durationTrial(i)=length(EyeSummary.(TrialNum).EyeData(newstart:newend,1));
                        startscounter(i)=newstart;
                        endscounter(i) = newend;
                    end
                end
                if isfield(Heatmap.(TrialNum),'OneFixationX')
                    Heatmap.(TrialNum).OneFixationXClean=Heatmap.(TrialNum).OneFixationX(Heatmap.(TrialNum).OneFixationX~=0);
                    Heatmap.(TrialNum).OneFixationYClean=Heatmap.(TrialNum).OneFixationY(Heatmap.(TrialNum).OneFixationY~=0);
                    
                    
                    % 'old way'
                    %          offsetTarget.(TrialNum).FixationY=(Heatmap.(TrialNum).OneFixationYClean)-Heatmap.(TrialNum).TargetYRespectToCenter;
                    %           offsetTarget.(TrialNum).FixationX=(Heatmap.(TrialNum).OneFixationXClean)-Heatmap.(TrialNum).TargetXRespectToCenter;
                    
                    offsetTarget.(TrialNum).FixationY=Heatmap.(TrialNum).TargetYRespectToCenter-(Heatmap.(TrialNum).OneFixationYClean);
                    offsetTarget.(TrialNum).FixationX=Heatmap.(TrialNum).TargetXRespectToCenter-(Heatmap.(TrialNum).OneFixationXClean);
                    if length(offsetTarget.(TrialNum).FixationY)>length(offsetTarget.(TrialNum).FixationX)
                        offsetTarget.(TrialNum).FixationY=offsetTarget.(TrialNum).FixationY(1:length(offsetTarget.(TrialNum).FixationX));
                    end
                    if length(offsetTarget.(TrialNum).FixationY)<length(offsetTarget.(TrialNum).FixationX)
                        offsetTarget.(TrialNum).FixationX=offsetTarget.(TrialNum).FixationX(1:length(offsetTarget.(TrialNum).FixationY));
                    end
                    coordinates.(TrialNum).RelativeToCenter=[offsetTarget.(TrialNum).FixationX'  offsetTarget.(TrialNum).FixationY'];
                    for ww=1:length(offsetTarget.(TrialNum).FixationY)
                        scatter((coordinates.(TrialNum).RelativeToCenter(ww,1)/pix_deg),(coordinates.(TrialNum).RelativeToCenter(ww,2))/pix_deg_vert, 50,[0.3 0.3 0.3], '+');
                        set (gca,'YDir','reverse')
                        hold on
                        degX=(coordinates.(TrialNum).RelativeToCenter(ww,1)/pix_deg);
                        degY=(coordinates.(TrialNum).RelativeToCenter(ww,2)/pix_deg_vert);
                        
                        for sss=2:length(sampleX)
                            for dd=2:length(sampleY)
                                if degX<=sampleX(sss) && degX>=sampleX(sss-1) && degY<=sampleY(dd) && degY>=sampleY(dd-1)
                                    heatmatrix(sss-1,dd-1)=heatmatrix(sss-1,dd-1)+1;
                                end
                            end
                        end
                        fix_counter=coordinates.(TrialNum).RelativeToCenter(ww,:);
                        BCEA_data(i)=fix_counter(1,1);
                        fixation_counter=[fixation_counter;fix_counter];
                    end
                    clear fix_counter
                    numFixation.(TrialNum).Fix=length(newfixation.(TrialNum).fixStart);
                end
            end
        elseif sum(EyeSummary.(TrialNum).EyeData(:,5)>=EyeSummary.(TrialNum).TimeStamps.Stimulus)==0
            numFixation.(TrialNum).Fix=0;
        end
    end
end

xlim([-25 25])
ylim([-25 25])

FixationsX=fixation_counter(:,1)/pix_deg;
FixationsY=fixation_counter(:,2)/pix_deg_vert;
FixationsX=FixationsX(~isnan(FixationsX)); %remove nans
FixationsY=FixationsY(~isnan(FixationsY)); %remove nans

AllFix=[FixationsX FixationsY];

% average center of fixation distribution (PRL equivalent) in pixels
center_PRL(1)=nanmean(fixation_counter(:,1));
center_PRL(2)=nanmean(fixation_counter(:,2));


ellli=cov(FixationsX,FixationsY);
data=[FixationsX FixationsY];
error_ellipse(ellli, nanmean(data), .68);

[eigenvec, eigenval ] = eig(ellli);
d=sqrt(eigenval);

areaEll=pi*d(1)*d(4);

%areaEllarcmin=3600*areaEll;
BCEA_deg=round(areaEll);
thetaM=rad2deg(acos(eigenvec(1,1)));


set(gca, 'FontName', 'Arial')
set (gca,'YDir','reverse')
name11=[name ' fixation distribution' ];
title( name11);

set(gca,'FontSize',16)

pbaspect([1 1 1]);

print([name '_fixationdistributionPRL'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI
hold on
% same figure as above but with added BCEA value in the same graph
txt10=num2str(BCEA_deg);
text(-15,10, ['BCEA= ' txt10, ' deg^2'], 'FontSize', 20)

txt11=num2str(thetaM);

print([name '_fixation_bceaPRL'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI


% figure
% poss2 = [-(wRect(3)/2)/pix_deg -(wRect(4)/2)/pix_deg_vert ((wRect(3)/2)*2)/pix_deg ((wRect(4)/2)*2)/pix_deg_vert];
%            rectangle('Position',poss2,'EdgeColor',[1 1 1],'FaceColor',[1 1 1])
% hold on
% poss = [-scotomadeg/2 -scotomadeg/2 scotomadeg scotomadeg];
% rectangle('Position',poss,'Curvature',[1 1],'EdgeColor',[.8 .8 .8],'FaceColor',[.8 .8 .8])
% hold on
% line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
% hold on
% line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
% hold on
% viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
% viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
% viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
% text(0,-11.5, '10^{\circ} ', 'FontSize', 20)
% text(0.5,-6.5, '5^{\circ} ', 'FontSize', 20)
% text(0,-16.5, '15^{\circ} ', 'FontSize', 20)


%hold on
%data=[FixationsX FixationsY];

% average center of fixation distribution (PRL equivalent) in deg
PRLdist_X=mean(FixationsX);
PRLdist_Y=mean(FixationsY);
% call the routine
[bandwidth,density,X,Y]=kde2d(data);
% plot the data and the density estimate
% contour3(X,Y,density,50), hold on
% plot(data(:,1),data(:,2),'r.','MarkerSize',5)
% view(2)
%  viscircles([0 0], scotomadeg/2,'EdgeColor',[.8 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 3);
% pbaspect([1 1 1]);
% set(gca, 'FontName', 'Arial')
% set (gca,'YDir','reverse')
%
%
% set(gca,'FontSize',16)
% title( name);
% hold on
% ylabel('degrees of visual angle', 'fontsize', 14);
% xlabel('degrees of visual angle', 'fontsize', 14);
% xlim([-25 25])
% ylim([-25 25])
%
% print([name '_kernelPRL'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI
%
figure
poss2 = [-(wRect(3)/2)/pix_deg -(wRect(4)/2)/pix_deg_vert ((wRect(3)/2)*2)/pix_deg ((wRect(4)/2)*2)/pix_deg_vert];
rectangle('Position',poss2,'EdgeColor',[1 1 1],'FaceColor',[1 1 1])
hold on
poss = [-scotomadeg/2 -scotomadeg/2 scotomadeg scotomadeg];
rectangle('Position',poss,'Curvature',[1 1],'EdgeColor',[.8 .8 .8],'FaceColor',[.8 .8 .8])
hold on
line([-15,15],[0,0],'LineWidth',1,'Color',[.1 .1 .1])
hold on
line([0,0], [-15,15],'LineWidth',1,'Color',[.1 .1 .1])
hold on
viscircles([0 0], 10/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 20/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
viscircles([0 0], 30/2,'EdgeColor',[.1 .1 .1],'DrawBackgroundCircle',false, 'LineWidth', 1);
text(0,-11.5, '10^{\circ} ', 'FontSize', 20)
text(0.5,-6.5, '5^{\circ} ', 'FontSize', 20)
text(0,-16.5, '15^{\circ} ', 'FontSize', 20)


hold on
%dens=std(data)/length(data)^(1/6);

dens=std(data)/length(data)^(1/10);
npern=512;
MAX=max(data,[],1); MIN=min(data,[],1); Range=MAX-MIN;
MAX_XY=MAX+Range/4; MIN_XY=MIN-Range/4;
% call the routine
[bandwidth,density,X,Y]=kde2d_mm(data,npern,MAX_XY,MIN_XY,dens);
% plot the data and the density estimate
contour3(X,Y,density,50), hold on
view(2)
pbaspect([1 1 1]);
set(gca, 'FontName', 'Arial')
set (gca,'YDir','reverse')

set(gca,'FontSize',16)
name2=[name ' adjust'];



%find center of PRL from KDE
MaxKDE=(density==max(max(density)));
PRLKDE_X=X(MaxKDE);
PRLKDE_Y=Y(MaxKDE);

% do we want the center of the KDE or the center of the BCEA?
whichPRL=1; % 1= bcea, 2= KDE
%center of BCEA
if whichPRL==1
    thePRLx=['x = ' num2str(PRLdist_X)];
    thePRLy=['y = ' num2str(PRLdist_Y)];
elseif whichPRL==2
    thePRLx=['x = ' num2str(PRLKDE_X)];
    thePRLy=['y = ' num2str(PRLKDE_Y)];
end


name2=[name ' KDE'];
title(name2);
hold on
ylabel('degrees of visual angle', 'fontsize', 14);
xlabel('degrees of visual angle', 'fontsize', 14);


xlim([-25 25])
ylim([-25 25])

print([name 'KDEPRL'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI

hold on
scatter(PRLKDE_X, PRLKDE_Y, 150, '+', 'r')
hold on
text(0, 16, thePRLx, 'fontsize', 18)
hold on
text(0, 18, thePRLy, 'fontsize', 18)

%xlim([-25 25])
%ylim([-25 25])
print([name 'KDEPRL_with_label'], '-dpng', '-r300'); %<-Save as PNG with 300 DPI

